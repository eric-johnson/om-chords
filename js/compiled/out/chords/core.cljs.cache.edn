;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name chords.core, :imports nil, :requires {om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :uses nil, :defs {->t20087 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([input-view data owner meta20088])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name chords.core/->t20087, :variadic false, :file "src/chords/core.cljs", :method-params ([input-view data owner meta20088]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 39, :max-fixed-arity 4, :fn-var true, :arglists (quote ([input-view data owner meta20088])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, diam-to-perim {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 9, :column 7, :end-line 9, :end-column 20, :arglists (quote ([radius offset]))}, :name chords.core/diam-to-perim, :variadic false, :file "src/chords/core.cljs", :end-column 20, :method-params ([radius offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius offset]))}, numeric? {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 25, :column 7, :end-line 25, :end-column 15, :arglists (quote ([text]))}, :name chords.core/numeric?, :variadic false, :file "src/chords/core.cljs", :end-column 15, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, t20084 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name chords.core/t20084, :file "src/chords/core.cljs", :type true, :anonymous true, :column 3, :line 39, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20087 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name chords.core/t20087, :file "src/chords/core.cljs", :type true, :anonymous true, :column 3, :line 39, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, handle-change {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 32, :column 7, :end-line 32, :end-column 20, :arglists (quote ([e data key]))}, :name chords.core/handle-change, :variadic false, :file "src/chords/core.cljs", :end-column 20, :method-params ([e data key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([e data key]))}, input-view {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([data owner]))}, :name chords.core/input-view, :variadic false, :file "src/chords/core.cljs", :end-column 17, :method-params ([data owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner]))}, chord-to-perim {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([data]))}, :name chords.core/chord-to-perim, :variadic false, :file "src/chords/core.cljs", :end-column 21, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, app-state {:name chords.core/app-state, :file "src/chords/core.cljs", :line 7, :column 1, :end-line 7, :end-column 19, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 7, :column 10, :end-line 7, :end-column 19}}, ->t20084 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([input-view data owner meta20085])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name chords.core/->t20084, :variadic false, :file "src/chords/core.cljs", :method-params ([input-view data owner meta20085]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 39, :max-fixed-arity 4, :fn-var true, :arglists (quote ([input-view data owner meta20085])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, diam-to-chord {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 13, :column 7, :end-line 13, :end-column 20, :arglists (quote ([radius chord-length]))}, :name chords.core/diam-to-chord, :variadic false, :file "src/chords/core.cljs", :end-column 20, :method-params ([radius chord-length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius chord-length]))}, on-js-reload {:protocol-inline nil, :meta {:file "/home/eric/personal-sync/dev/chords/src/chords/core.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([]))}, :name chords.core/on-js-reload, :variadic false, :file "src/chords/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:offset :radius :chord-length :target}, :order [:radius :chord-length :offset :target]}, :doc nil}